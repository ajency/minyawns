// Generated by CoffeeScript 1.8.0
(function() {
  define(["backbone"], function(Backbone) {
    var _sync;
    _.extend(Backbone.Model.prototype, {
      sync: function(method, model, options) {
        var allData, idAttr, onlyChanged, params, xhr, _action, _ref, _ref1;
        if (!this.name) {
          throw new Error("'name' property not set for the model");
        }
        params = {
          type: "POST",
          dataType: "json",
          data: {}
        };
        params.url = this.urlRoot;
        _action = "" + method + "-" + this.name;
        params.data['action'] = _action;
        switch (method) {
          case 'read':
            params.type = 'GET';
            idAttr = model['idAttribute'];
            params.data[idAttr] = model.get(idAttr);
            break;
          case 'create':
            params.data = _.defaults(model.toJSON(), params.data);
            break;
          case 'update':
            onlyChanged = (_ref = options.onlyChanged) != null ? _ref : false;
            if (onlyChanged) {
              if (model.hasChanged()) {
                params.data.changes = {};
                _.each(model.changed, function(property, index) {
                  return params.data.changes[property] = this.get(property);
                }, this);
              }
            } else {
              params.data = _.defaults(model.toJSON(), params.data);
            }
            break;
          case 'delete':
            allData = (_ref1 = options.allData) != null ? _ref1 : true;
            if (allData) {
              params.data = _.defaults(model.toJSON(), params.data);
            } else {
              idAttr = model['idAttribute'];
              params.data[idAttr] = model.get(idAttr);
            }
        }
        xhr = options.xhr = Backbone.ajax(_.extend(params, options));
        model.trigger("request", model, xhr, options);
        if (method === 'read' || method === 'create') {
          model._fetch = xhr;
        }
        return xhr;
      },
      parse: function(resp) {
        if (resp.code === 'OK') {
          console.log("response");
          console.log(resp);
          return resp.data;
        }
        return resp;
      }
    });
    _.extend(Backbone.Collection.prototype, {
      parse: function(resp) {
        if (resp.code === 'OK') {
          return resp.data;
        }
        return resp;
      }
    });
    _sync = Backbone.sync;
    return Backbone.sync = function(method, entity, options) {
      var sync;
      if (options == null) {
        options = {};
      }
      sync = _sync(method, entity, options);
      if (!entity._fetch && method === "read" || !entity._fetch && method === "create") {
        entity._fetch = sync;
      }
      return sync;
    };
  });

}).call(this);
